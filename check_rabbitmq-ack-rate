#!/bin/bash
#
# Author: Bart Janssens
# Email:  bjanssens@inuits.eu
# Date:   Wed Apr 6 2016
#
# Requires the jq package to work
#
showhelp () {
cat <<eof

 Check to see if a rabbitmq queue is behaving like it should.
 This will do a curl to get details on the queue.
 Then it will  parse the data from the curl by using jq.

 Parameters:
   --queue|-q           : The queue to check
   --help|-h            : Shows help
   --passwd|-p          : The password of the user, defaults to 'guest'
   --user|-u            : The user to use, defaults to 'guest'
   --url                : The url to use, format 'host                                                                                      : port' defaults to 'localhost : 15672'
   --warning|-w         : The warning threashold, defaults to '0.5'. This is the relationship between messages acked vs messages published
   --critical|-c        : The critical threashold, defaults to '0.3'. This is the relationship between messages acked vs messages published
   --queue-warning|-qw  : The amount of unprocessed messages in the queue before generating a warning
   --queue-critical|-qc : The amount of unprocessed messages in the queue before the check goes critical.
   --debug|-d           : Show debug values, aka echo some params

 Example usage:
 ./check_rabbitmq_ack_rate -q incoming -u stats -p strongpw

eof
  exit 3
}

function devide() {
  result=$(echo "scale=$float_scale; $*" | bc -q 2>/dev/null)
  echo $result
}

defaults () {
  float_scale='2'
  # Required params
  if [[ -z "${queue_name}" ]]; then message="Unknown: You need to specify, --queue or use --help."; exitstatus='3'; quit; fi
  # Optional params
  if [[ -z "${debug}" ]]; then debug=false; fi
  if [[ -z "${passwd}" ]]; then passwd='guest'; fi
  if [[ -z "${queue_processing_rate_critical}" ]]; then queue_processing_rate_critical='0.3'; fi
  if [[ -z "${queue_processing_rate_warning}" ]]; then queue_processing_rate_warning='0.5'; fi
  if [[ -z "${user}" ]]; then user='guest'; fi
  if [[ -z "${url}" ]]; then url='localhost:15672'; fi
  if [[ -z "${queue_messages_warning}" ]]; then queue_messages_warning='50'; fi
  if [[ -z "${queue_messages_critical}" ]]; then queue_messages_critical='100'; fi
}

data () {
  # Get the data
  if $debug; then echo "Debug: curl -s -u ${user}:${passwd} http://${url}/api/queues"; fi
  get=$( curl -s -u ${user}:${passwd} http://${url}/api/queues )

  # Parse the data
  queue_error=$( echo $get | jq "." | grep 'error' )
  if [[ ! -z "${queue_error}" ]]; then message="Unknown: curl error:${queue_error} ."; exitstatus='3'; quit; fi
  queue_messages=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].messages" -r )
  queue_messages_delta=$( echo $get_delta_one | jq ". | map(select(.name == \"${queue_name}\")) | .[].messages" -r )
  queue_messages_publish_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.publish_details.rate" -r )
  queue_messages_get_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.get_details.rate" -r )
  queue_messages_noack_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.ack_details.rate" -r )
  queue_processing_rate='0'

  # Check the data
  if $debug
  then
    echo "Debug: messages:  $queue_messages"
    echo "Debug: messages publish:  $queue_messages_publish_rate"
    echo "Debug: messages get:  $queue_messages_get_rate"
    echo "Debug: messages noack:  $queue_messages_noack_rate"
  fi
}

do_main_check () {
  # Check if there are messages in the queue
  if (( $( echo "${queue_messages} > 0" | bc -l ) ))
  then
    # If that is the case, check that the publish rate isn't 0
    if [[ ! "$queue_messages_publish_rate" == "0" ]]
    then
      # Calculate the processing rate
      queue_processing_rate=$( devide "${queue_messages_get_rate} / ${queue_messages_publish_rate}" )
      if $debug
      then
        echo "Debug: messages processing:  $queue_processing_rate"
      fi
      # Check the processing rate against the given threasholds
      if (( $( echo "${queue_processing_rate} < ${queue_processing_rate_critical}" | bc -l ) )) && (( $echo "${queue_messages} > ${queue_messages_critical}" | bc -l ))
      then
        message=$( echo "Critical: Queue '${queue_name}' is processing messages at ${queue_processing_rate}/s, messages in the queue: '${queue_messages}'." )
        exitstatus='2'
      elif (( $( echo "${queue_processing_rate} < ${queue_processing_rate_warning}" | bc -l ) )) && (( $echo "${queue_messages} > ${queue_messages_warning}" | bc -l ))
      then
        message=$( echo "Warning: Queue '${queue_name}' is processing messages at ${queue_processing_rate}/s, messages in the queue: '${queue_messages}'." )
        exitstatus='1'
      else
        message=$( echo "OK: Queue '${queue_name}' is processing messages at ${queue_processing_rate}/s." )
        exitstatus='0'
      fi
    # If the publish rate is 0, we have an issue.
    else
      # Check to see if the amount of messages in the queue isn't generating a false positive,
      # like 1 that just hasn't been picked up yet
      if (( $echo "${queue_messages} > ${queue_messages_critical}" | bc -l ))
      then
        message=$( echo "Critical: Queue '${queue_name}' is NOT publishing messages, messages in the queue: '${queue_messages}'." )
        exitstatus='2'
      elif (( $echo "${queue_messages} > ${queue_messages_warning}" | bc -l ))
      then
        message=$( echo "Warning: Queue '${queue_name}' is NOT publishing messages, messages in the queue: '${queue_messages}'." )
        exitstatus='1'
      else
        message=$( echo "Ok: Queue '${queue_name}' is NOT publishing messages, messages in the queue: '${queue_messages}'." )
        exitstatus='0'
      fi
    fi
  else
    message=$( echo "Ok: Queue '${queue_name}' is idle" )
    exitstatus='0'
  fi
}

quit () {
  echo "${message}" && exit $exitstatus
}

# start the case-ing
while test -n "$1"
do
  case "$1" in
    --help|-h)
      showhelp
      ;;
    --queue|-q)
      shift
      queue_name=$1
      shift
      ;;
    --user|-u)
      shift
      vhost=$1
      shift
      ;;
    --passwd|-p)
      shift
      passwd=$1
      shift
      ;;
    --warning|-w)
      shift
      queue_processing_rate_warning=$1
      shift
      ;;
    --critical|-c)
      shift
      queue_processing_rate_ciritical=$1
      shift
      ;;
    --queue-warning|-qw)
      shift
      queue_messages_warning=$1
      shift
      ;;
    --queue-critical|-qc)
      shift
      queue_messages_critical=$1
      shift
      ;;
    --debug|-d)
      shift
      debug=true
      ;;
    *)
      showhelp
      ;;
  esac
done

defaults
data
do_main_check
quit
