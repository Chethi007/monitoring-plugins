#!/bin/bash
#
# Author: Bart Janssens
# Email:  bjanssens@inuits.eu
# Date:   Wed Apr 6 2016
#
# Requires the jq package to work
#
showhelp () {
cat <<eof

 Check to see if a rabbitmq queue is behaving like it should.
 This will do a curl to get details on the queue.
 Then it will  parse the data from the curl by using jq.

 Parameters:
   --queue|-q           : The queue to check
   --vhost|-v           : The vhost to check
   --help|-h            : Shows help
   --passwd|-p          : The password of the user, defaults to 'guest'
   --user|-u            : The user to use, defaults to 'guest'
   --url                : The url to use, format 'host:port' defaults to 'localhost:15672'
   --warning|-w         : The warning threshold of ack rate, defaults to '10'
   --critical|-c        : The critical thresholdof ack rate, defaults to '5'
   --queue-warning|-qw  : The amount of unprocessed messages in the queue before generating a warning, defaults to '50'
   --queue-critical|-qc : The amount of unprocessed messages in the queue before the check goes critical, defaults to '100'
   --priority-queue|-pc : The queue defined by -q|--queue is not checked and the check is green if the priority queue is NOT empty.
   --debug|-d           : Show debug values, aka echo some params

 Example usage:
 ./check_rabbitmq_ack_rate -q incoming -u stats -p strongpw

eof
  exit 3
}

defaults () {
  float_scale=2
  # Required params
  if [[ -z "${queue_name}" ]]; then message="Unknown: You need to specify, --queue or use --help."; exitstatus=3; quit; fi
  # Optional params
  if [[ -z "${debug}" ]]; then debug=false; fi
  if [[ -z "${passwd}" ]]; then passwd=guest; fi
  if [[ -z "${queue_processing_rate_critical}" ]]; then queue_processing_rate_critical=5; fi
  if [[ -z "${queue_processing_rate_warning}" ]]; then queue_processing_rate_warning=10; fi
  if [[ -z "${user}" ]]; then user=guest; fi
  if [[ -z "${url}" ]]; then url=localhost:15672; fi
  if [[ -z "${vhost}" ]]; then vhost=''; fi
  if [[ -z "${queue_messages_warning}" ]]; then queue_messages_warning=50; fi
  if [[ -z "${queue_messages_critical}" ]]; then queue_messages_critical=100; fi
}

data () {
  # Validations
  if [[ -n "$vhost" ]] && [[ "${vhost:0:1}" != "/" ]]; then vhost="/${vhost}"; fi

  # Get the data
  $debug && echo "Debug: curl -s -u ${user}:${passwd} http://${url}/api/queues${vhost}"
  get=$( curl -s -u ${user}:${passwd} http://${url}/api/queues${vhost} )

  # Parse the data
  queue_error=$( echo $get | jq "." | grep 'error' )
  if [[ ! -z "${queue_error}" ]]; then message="Unknown: curl error:${queue_error} ."; exitstatus=3; quit; fi

  if [[ -n "${priority_queue_name}" ]];then
    priority_queue_messages=$( echo $get | jq ". | map(select(.name == \"${priority_queue_name}\")) | .[].messages" -r )
    priority_queue_messages_unack=$( echo $get | jq ". | map(select(.name == \"${priority_queue_name}\")) | .[].messages_unacknowledged" -r )
  fi

  queue_messages=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].messages" -r )
  queue_messages_unack=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].messages_unacknowledged" -r )
  queue_messages_delta=$( echo $get_delta_one | jq ". | map(select(.name == \"${queue_name}\")) | .[].messages" -r )
  queue_messages_ack_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.ack_details.rate" -r )
  queue_messages_get_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.get_details.rate" -r )
  queue_messages_noack_rate=$( echo $get | jq ". | map(select(.name == \"${queue_name}\")) | .[].message_stats.ack_details.rate" -r )

  # Check the data
  if $debug;then
    echo "Debug: messages:  $queue_messages"
    echo "Debug: messages unack: $queue_messages_unack"
    echo "Debug: messages ack:  $queue_messages_ack_rate"
    echo "Debug: messages get:  $queue_messages_get_rate"
    echo "Debug: messages noack:  $queue_messages_noack_rate"
  fi
}

do_main_check () {

  # Check if queue_messages is not empty
  if [[ -z "${queue_messages}" ]];then
    message="Critical: The queue '${queue_name}' doesn't seem to exist."
    exitstatus=2
    quit
  fi

  if [[ -n "${priority_queue_name}" ]];then
    # Check if there are messages in the priority queue minus the unacked messages as we don't care about those
    priority_queue_messages=$(( ${priority_queue_messages} - ${priority_queue_messages_unack} ))
    if (( $( echo "${priority_queue_messages} > 0" | bc -l ) ));then
      message="Ok: The queue with higher priority '${priority_queue_name}' is not empty so the queue '${queue_name}' can grow."
      exitstatus=0
      quit
    fi
  fi

  # Check if there are messages in the queue minus the unacked messages as we don't care about those
  queue_messages=$(( ${queue_messages} - ${queue_messages_unack} ))
  if (( $( echo "${queue_messages} == 0" | bc -l ) ));then
    message="Ok: The queue '${queue_name}' has no new messages to process. The current ack rate is ${queue_messages_ack_rate}/s."
    exitstatus=0
    quit
  fi

  # There has to be some messages to process before we check the ack rate
  if (( $( echo "${queue_messages} > ${queue_processing_rate_warning}" | bc -l ) ));then

    if (( $( echo "${queue_messages_ack_rate} < ${queue_processing_rate_critical}" | bc -l ) ));then
      message="Critical: The queue '${queue_name}' is acking messages too slowly at ${queue_messages_ack_rate}/s, messages in the queue: '${queue_messages}'."
      exitstatus=2
      quit
    fi

    if (( $( echo "${queue_messages_ack_rate} < ${queue_processing_rate_warning}" | bc -l ) ));then
      message="Warning: The queue '${queue_name}' is acking messages too slowly at ${queue_messages_ack_rate}/s, messages in the queue: '${queue_messages}'."
      exitstatus=1
      # do not quit yet because the check still can be critical, see the following check below
    fi

  fi

  # Check the total number of messages
  if (( $( echo "${queue_messages} > ${queue_messages_critical}" | bc -l ) ));then
    message="Critical: The queue '${queue_name}' is filling up. Ack rate: ${queue_messages_ack_rate}/s, messages in the queue: '${queue_messages}'."
    exitstatus=2
    quit
  elif (( $( echo "${queue_messages} > ${queue_messages_warning}" | bc -l ) ));then
    message="Warning: The queue '${queue_name}' is filling up. Ack rate: ${queue_messages_ack_rate}/s, messages in the queue: '${queue_messages}'."
    exitstatus=1
    quit
  fi

  if [[ $exitstatus != 1 ]];then
    message="Ok: The queue '${queue_name}' is acking messages at ${queue_messages_ack_rate}/s, messages in the queue: '${queue_messages}'."
    exitstatus=0
  fi

}

quit () {
  echo "${message}" && exit $exitstatus
}

# start the case-ing
while test -n "$1"
do
  case "$1" in
    --help|-h)
      showhelp
      ;;
    --queue|-q)
      shift
      queue_name=$1
      shift
      ;;
    --user|-u)
      shift
      user=$1
      shift
      ;;
    --passwd|-p)
      shift
      passwd=$1
      shift
      ;;
    --vhost|-v)
      shift
      vhost=$1
      shift
      ;;
    --warning|-w)
      shift
      queue_processing_rate_warning=$1
      shift
      ;;
    --critical|-c)
      shift
      queue_processing_rate_critical=$1
      shift
      ;;
    --queue-warning|-qw)
      shift
      queue_messages_warning=$1
      shift
      ;;
    --queue-critical|-qc)
      shift
      queue_messages_critical=$1
      shift
      ;;
    --priority-queue|-pc)
      shift
      priority_queue_name=$1
      shift
      ;;
    --debug|-d)
      shift
      debug=true
      ;;
    *)
      showhelp
      ;;
  esac
done

defaults
data
do_main_check
quit
